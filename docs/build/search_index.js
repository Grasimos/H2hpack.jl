var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#HPACK.decode-Tuple{Any}","page":"API Reference","title":"HPACK.decode","text":"decode(data)\n\nDecode HPACK-compressed headers with a new decoder (stateless, for simple use).\n\n\n\n\n\n","category":"method"},{"location":"api/#HPACK.decode_headers-Tuple{HPACKDecoder, Vector{UInt8}}","page":"API Reference","title":"HPACK.decode_headers","text":"decode_headers(decoder::HPACKDecoder, data::Vector{UInt8}) -> Vector{Pair{String, String}}\n\nDecode HPACK-compressed headers. The decoder's state (dynamic table) will be updated.\n\n\n\n\n\n","category":"method"},{"location":"api/#HPACK.encode-Tuple{Any}","page":"API Reference","title":"HPACK.encode","text":"encode(headers; huffman=true)\n\nEncode headers with a new encoder (stateless, for simple use).\n\n\n\n\n\n","category":"method"},{"location":"api/#HPACK.encode_headers-Tuple{HPACKEncoder, Vector{<:Pair}}","page":"API Reference","title":"HPACK.encode_headers","text":"encode_headers(encoder::HPACKEncoder, headers) -> Vector{UInt8}\n\nEncode a list of HTTP headers using HPACK compression. The encoder's state (dynamic table) will be updated.\n\n\n\n\n\n","category":"method"},{"location":"api/#HPACK.get_stats-Tuple{HPACKContext}","page":"API Reference","title":"HPACK.get_stats","text":"get_stats(ctx::HPACKContext)\n\nReturn the HPACKStats object from a context.\n\n\n\n\n\n","category":"method"},{"location":"api/#HPACK.hpack_context-Tuple{}","page":"API Reference","title":"HPACK.hpack_context","text":"hpack_context(; max_table_size=4096, huffman_enabled=true)\n\nCreate a new HPACKContext for advanced compression/decompression state management.\n\n\n\n\n\n","category":"method"},{"location":"api/#HPACK.hpack_stats-Tuple{}","page":"API Reference","title":"HPACK.hpack_stats","text":"hpack_stats(; kwargs...)\n\nCreate a new HPACKStats object, optionally setting fields.\n\n\n\n\n\n","category":"method"},{"location":"api/#HPACK.reset_stats!-Tuple{HPACKContext}","page":"API Reference","title":"HPACK.reset_stats!","text":"reset_stats!(ctx::HPACKContext)\n\nReset all statistics in the context to zero.\n\n\n\n\n\n","category":"method"},{"location":"usage/#HPACK.jl-Usage-Examples","page":"Usage","title":"HPACK.jl Usage Examples","text":"","category":"section"},{"location":"usage/#Basic-Header-Encoding/Decoding","page":"Usage","title":"Basic Header Encoding/Decoding","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"using HPACK\n\nencoder = HPACKEncoder()\ndecoder = HPACKDecoder()\nheaders = [\"content-type\" => \"text/html\", \"accept\" => \"*/*\"]\nencoded = encode_headers(encoder, headers)\ndecoded = decode_headers(decoder, encoded)\n@show decoded","category":"page"},{"location":"usage/#Integer-Encoding/Decoding","page":"Usage","title":"Integer Encoding/Decoding","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"bytes = encode_integer(1337, 5)\nval, _ = decode_integer(bytes, 1, 5)\n@show bytes, val","category":"page"},{"location":"usage/#String-Encoding/Decoding","page":"Usage","title":"String Encoding/Decoding","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"str = \"hello world\"\nencoded_str = encode_string(str, true)\ndecoded_str, _ = decode_string(encoded_str, 1)\n@show decoded_str","category":"page"},{"location":"usage/#Huffman-Coding","page":"Usage","title":"Huffman Coding","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"huff = huffman_encode(\"hpack\")\nplain = huffman_decode(huff)\n@show huff, plain","category":"page"},{"location":"usage/#Dynamic-Table-Manipulation","page":"Usage","title":"Dynamic Table Manipulation","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"using HPACK.Tables\n\ndt = DynamicTable(UInt32(128))\nadd!(dt, \"foo\", \"bar\")\n@show dt\nempty!(dt)\n@show dt","category":"page"},{"location":"usage/#Indexing-Table","page":"Usage","title":"Indexing Table","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"it = IndexingTable(UInt32(128))\nadd!(it, \"x\", \"y\")\nidx = find_index(it, \"x\", \"y\")\n@show idx","category":"page"},{"location":"usage/#Validation","page":"Usage","title":"Validation","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"@show is_valid_header_name(\"content-type\")\n@show is_valid_header_value(\"ok-value\")","category":"page"},{"location":"#HPACK.jl","page":"Home","title":"HPACK.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for HPACK.jl!","category":"page"},{"location":"#API-Reference","page":"Home","title":"API Reference","text":"","category":"section"},{"location":"#HPACK.encode","page":"Home","title":"HPACK.encode","text":"encode(headers; huffman=true)\n\nEncode headers with a new encoder (stateless, for simple use).\n\n\n\n\n\n","category":"function"},{"location":"#HPACK.decode","page":"Home","title":"HPACK.decode","text":"decode(data)\n\nDecode HPACK-compressed headers with a new decoder (stateless, for simple use).\n\n\n\n\n\n","category":"function"},{"location":"#HPACK.encode_headers","page":"Home","title":"HPACK.encode_headers","text":"encode_headers(encoder::HPACKEncoder, headers) -> Vector{UInt8}\n\nEncode a list of HTTP headers using HPACK compression. The encoder's state (dynamic table) will be updated.\n\n\n\n\n\n","category":"function"},{"location":"#HPACK.decode_headers","page":"Home","title":"HPACK.decode_headers","text":"decode_headers(decoder::HPACKDecoder, data::Vector{UInt8}) -> Vector{Pair{String, String}}\n\nDecode HPACK-compressed headers. The decoder's state (dynamic table) will be updated.\n\n\n\n\n\n","category":"function"},{"location":"#HPACK.HpackTypes.HPACKEncoder","page":"Home","title":"HPACK.HpackTypes.HPACKEncoder","text":"HPACKEncoder\n\nHPACK encoder state maintaining the indexing table and encoding context.\n\nFields\n\ntable::IndexingTable: Indexing table\nhuffman_enabled::Bool: Enable Huffman encoding\n\n\n\n\n\n","category":"type"},{"location":"#HPACK.HpackTypes.HPACKDecoder","page":"Home","title":"HPACK.HpackTypes.HPACKDecoder","text":"HPACKDecoder\n\nHPACK decoder that maintains dynamic table state and decodes compressed header blocks.\n\nFields\n\ndynamic_table::DynamicTable: Dynamic table for state\nmax_table_size::Int: Maximum table size\nmax_header_list_size::Int: Maximum header list size\n\n\n\n\n\n","category":"type"},{"location":"#HPACK.Encoder.update_table_size!","page":"Home","title":"HPACK.Encoder.update_table_size!","text":"update_table_size!(encoder::HPACKEncoder, max_size::UInt32)\n\nUpdate the maximum size of the dynamic table. Returns the size update instruction bytes if needed.\n\nUsage\n\nbytes = update_table_size!(encoder, UInt32(2048))\n\n\n\n\n\n","category":"function"},{"location":"#HPACK.Encoder.reset_encoder!","page":"Home","title":"HPACK.Encoder.reset_encoder!","text":"reset_encoder!(encoder::HPACKEncoder)\n\nReset the encoder state (clear dynamic table).\n\nUsage\n\nreset_encoder!(encoder)\n\n\n\n\n\n","category":"function"},{"location":"#HPACK.Decoder.reset_decoder!","page":"Home","title":"HPACK.Decoder.reset_decoder!","text":"reset_decoder!(decoder::HPACKDecoder)\n\nReset the decoder to initial state, clearing the dynamic table.\n\nUsage\n\nreset_decoder!(decoder)\n\n\n\n\n\n","category":"function"}]
}
